/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sun.tools.javac.ibarvinok;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.tools.javac.util.Log;
import com.sun.tools.javac.main.JavaCompiler;

/**
 * JNA Wrapper for library <b>ibarvinok</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
interface barvinok extends Library {
	public static final String JNA_LIBRARY_NAME = "ibarvinok";
	public static final barvinok INSTANCE = (barvinok)Native.loadLibrary(barvinok.JNA_LIBRARY_NAME, barvinok.class);
	/**
	 * Original signature : <code>void init()</code><br>
	 * <i>native declaration : line 13</i>
	 */
	void init(boolean dump);
	/**
	 * Original signature : <code>char* process_line(char*)</code><br>
	 * <i>native declaration : line 14</i><br>
	 * @deprecated use the safer methods {@link #process_line(java.lang.String)} and {@link #process_line(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	Pointer process_line(Pointer input);
	/**
	 * Original signature : <code>char* process_line(char*)</code><br>
	 * <i>native declaration : line 14</i>
	 */
	Pointer process_line(String input);
	/**
	 * Original signature : <code>void error_dump()</code><br>
	 * <i>native declaration : line 15</i>
	 */
	void error_dump(int dump);

	/**
	 * Original signature : <code>void shutdown()</code><br>
	 * <i>native declaration : line 15</i>
	 */
	void shutdown();
	/**
	 * Original signature : <code>void freeres(char*)</code><br>
	 * <i>native declaration : line 16</i><br>
	 */
	//@Deprecated
	void freeres(Pointer string);
	/**
	 * Original signature : <code>void freeres(char*)</code><br>
	 * <i>native declaration : line 16</i>
	 */
	void freeres(String string);

}

public class ibarvinok
{
	private static void error(String report)
	{
		JavaCompiler.getCompiler().log.error("barvinok",report);
	}

	private static void error(int pos,String report)
	{
		JavaCompiler.getCompiler().log.error(pos,"barvinok",report);
	}

	public static void init(final Log log,boolean dump)
	{
		try
		{
			barvinok.INSTANCE.init(dump);
		}
		catch(Exception e)
		{
			error(e.toString());
		}
		catch(Throwable e)
		{
			error(e.toString());
		}
	}

	public static void shutdown()
	{
		try
		{
			barvinok.INSTANCE.shutdown();
		}
		catch(Exception e)
		{
			error(e.toString());
		}
		catch(Throwable e)
		{
			error(e.toString());
		}
	}

	public static String process(int pos,String line)
	{
		try
		{
			barvinok.INSTANCE.error_dump(1);
			Pointer ptr=barvinok.INSTANCE.process_line(line);
			String res=ptr.getString(0);
			barvinok.INSTANCE.freeres(ptr);

			if(res.equals("ERROR"))
				error(pos,line);

			return res;
		}
		catch(Exception e)
		{
			error(pos,e.toString());
		}
		catch(Throwable e)
		{
			error(pos,e.toString());
		}

		return "";
	}

	public static String process(String line)
	{
		try
		{
			barvinok.INSTANCE.error_dump(1);
			Pointer ptr=barvinok.INSTANCE.process_line(line);
			String res=ptr.getString(0);
			barvinok.INSTANCE.freeres(ptr);

			if(res.equals("ERROR"))
				error(line);

			return res;
		}
		catch(Exception e)
		{
			error(e.toString());
		}
		catch(Throwable e)
		{
			error(e.toString());
		}

		return "";
	}

	public static String processNoError(String line)
	{
		try
		{
			barvinok.INSTANCE.error_dump(0);
			Pointer ptr=barvinok.INSTANCE.process_line(line);
			String res=ptr.getString(0);
			barvinok.INSTANCE.freeres(ptr);

			return res;
		}
		catch(Exception e)
		{
			error(e.toString());
		}
		catch(Throwable e)
		{
			error(e.toString());
		}

		return "";
	}
}
