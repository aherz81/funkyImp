// @PARAM: -PP "" -g:none  -d ./tmp -CPP
// shows how to run a custom shell script as a test:
// @CUSTOM ./custom.sh
// as can be seen from the cmdl, the CWD is set to the .funky file
// @TEST noerror

/*
	Alex: currently this is the most important test case, this file generates run-able
	output which terminates if executed and produces some output to stdout.

	<<<<<<< You should try NOT to break this. >>>>>>>>

*/

#define unknown native unique interface

//FFI: declare an unkown type (native=no outout from compiler, unique=mutable):
unknown FILE;

//FFI: (native=no output, include header <stdio>)
native class stdio
{
    static FILE fopen(String f,String m); //thread safe method fopen, String==char*
    static void fprintf(inout FILE f, String txt); //inout means var is read and written
    static void fread(out String txt,int size,int items, inout FILE f);
    static void fclose(inout FILE f);
    static void printf(String txt,Object ... j); //HACK!
}

native class stdlib
{
	static int rand();
}

class BinTree
{
	BinTree& left;
	BinTree& right;
	int value;

	BinTree(BinTree left,int value,BinTree right)
	{
		this.left=left;
		this.value=value;
		this.right=right;
	}

	//loop member fun (must use lthis because this is rvalue)
	nonblocking int sum(int accum)
	{
		BinTree next;

		if(left!=null&&right!=null)
		{
			int ls=left.sum(0);
			int rs=right.sum(0);
			cancel ls+rs+accum+value;
		}
		else
		{
			if(left!=null)
				next=left;
			else if(right!=null)
				next=right;
			else
				cancel accum+value;
		}

		//could move cancel ls+rs+accum+value; into finally with ifexpr
		finally next.sum(accum+value);
	}

	//non destructive add:
	BinTree add(int value)
	{
		if(value==this.value)
			cancel this;
		else if(value<this.value)
		{
			if(left!=null)
				cancel new BinTree(left.add(value),this.value,right);
			else
				cancel new BinTree(new BinTree(null,value,null),this.value,right);
		}
		else
		{
			if(right!=null)
				cancel new BinTree(left,this.value,right.add(value));
			else
				cancel new BinTree(left,this.value,new BinTree(null,value,null));
		}
	}
}

#define SIZE 100000

public class bintree
{
	static nonblocking BinTree gen_tree(int n,BinTree root)
	{
		if(n<=0)
			cancel root;

		finally gen_tree(n-1,root.add(stdlib.rand()));//SLOW!!
	}

    static int main(int argc, inout unique String[one_d{-1}] argv)
    {
		BinTree t=gen_tree(SIZE,new BinTree(null,0,null));
		#TIME(t,"gen_tree");//time (and dump) calc of t

		int res=t.sum(0);
		#TIME(res,"sum");

        stdio.printf("bintree.sum %d=%d",SIZE,res);
        finally res;
    }
}
