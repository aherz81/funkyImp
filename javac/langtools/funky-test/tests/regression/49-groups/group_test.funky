// @PARAM: -PP "" -g:none -CPP -d ./tmp
// shows how to run a custom shell script as a test:
// @CUSTOM ./custom.sh
// as can be seen from the cmdl, the CWD is set to the .funky file
// @TEST noerror

/*
	Alex: currently this is the most important test case, this file generates run-able 
	output which terminates if executed and produces some output to stdout. 

	<<<<<<< You should try NOT to break this. >>>>>>>>

*/

#define unknown native unique interface

//FFI: declare an unkown type (native=no outout from compiler, unique=mutable):
unknown FILE;

//FFI: (native=no output, include header <stdio>)
native class stdio
{
    group FILEIO;
	group TESTIO;

    static group(FILEIO) FILE fopen(String f,String m); //thread safe method fopen, String==char*
    static group(FILEIO) void fprintf(inout FILE f, String txt); //inout means var is read and written
    static group(FILEIO) void fread(out String txt,int size,int items, inout FILE f);
    static group(FILEIO) void fclose(inout FILE f);
    
    //static safe group(FILEIO) void printf(String txt,Object .. j); //HACK!!
    static group(FILEIO) void printf(String txt); 
    static group(TESTIO) void printf(String txt,Object o); 
}

atomic singular Counter //a simple atomic counter
{
    long count=0;
    event Inc(out long cur)
    {
        long tmp=count+1;
        cur=tmp;
        finally this where count=tmp;
    }

    event Reset()
    {
        finally this where count=0;
    }

    event Set(long a)
    {
        finally this where count=a;
    }
}

public class group_test
{
    static int main(int argc, inout unique String[one_d{-1}] argv)
    {
        Counter cc=new Counter();
        
        long n0,n1;
        
        cc.Inc(n0);
        cc.Inc(n1);
/*    
        if(n1>0)
        {
/*
            if(n0>0)
                stdio.printf("n0:%d n1:%d\n",n0,n1);
			else
			{}
*/
        }
*/
		stdio.printf("0\n",null);
		stdio.printf("1\n");
		stdio.printf("2\n",null);
		stdio.printf("3\n");
		stdio.printf("3\n",null);
        
        finally 0;
/*        
        RefCount rc=new RefCount(3,null,null);

        finally rc.Empty();
        
        //rc.Add(1);
        
        rc.Sub(1);
        rc.Sub(1);
                
        rc.Sub(1);

		if(rc.sample()>0)
	        rc.Sub(1);
*/        
    }
}
