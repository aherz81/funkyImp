// @PARAM: -verbose -regression -XD-skipgenerate
// @NOERROR


unique class BinTree
{
    public BinTree& left=null;
    public BinTree& right=null;

    int val;

    BinTree(int v)
    {
        val=v;
    }
}

public class LinearityTest
{
    void BTTtestDestUpd()
    {
       BinTree bt=new BinTree(5);
       bt__2=bt where bt.left=new BinTree(2); // @NOERROR(*)
       bt__3=bt__2 where bt__2.right=new BinTree(7); // @NOERROR(*)
    }

    void BTTtestPersUpd()
    {
       BinTree bt=new BinTree(5); // @NOERROR(*)
       bt__2=bt where bt.left=new BinTree(2); // @NOERROR(*)
       bt__3=bt__2 where bt__2.right=new BinTree(7); // @NOERROR(*)
       
//       int x=g;       
    }

    int Simple(int sx,out int q)
    {
        int a=g1(sx);
        int d=g1(a);
        int g=g1(d);
        a__2=g1(a);
        int b=g1(a__2);
        int c=g1(a__2);
        int e=g2(b,c);
        int f=g2(e,g);

        int qret=10;
        q=qret;

        resume f;
    }

    void test()
    {
        int qout;
        int res;
        int inp=5;
        res=Simple(inp,qout);

        int val=10;

        int r2=g1(val);
        g2(r2,r2);

        int r3=test2();

        int lval=0;
        int r4=test3(lval);
        

        int ww=9;
        int tt=retlocorglob(ww);
    }

    int test2()
    {
        int i=10;
        resume i;
    }

    int test3(int q)
    {
        int i=q;
        int i2=q;
        resume q;
    }

    int retlocorglob(int x)
    {
        int i=5;
        if(x>10)
            resume i;
        else
            resume x;
    }

    int g1(int x1)
    {
        int i=x1;
        resume i;//linear
    }

    int g2(int x2,int y)
    {
/*
        if(x2>y)
            resume x2;
        else
            resume y;
*/
        resume x2+y;
    }

    int rec(int xr,int y)
    {
        if(xr<0)
            resume y;
        else
            resume rec(xr-1,y+1);
    }

    int g3(int x3,int y,int z)
    {
        if(z>10) //linear
            resume x3;
        else
            resume y;
    }
}    
