context: '[N] -> {  : N >= 0 }'
arrays:
- context: '[N] -> {  : N >= 0 }'
  extent: '[N] -> { a[i0, i1] : i0 >= 0 and i1 >= 0 and i1 <= -1 + N }'
  element_type: int
- context: '{  :  }'
  extent: '{ ind[] }'
  element_type: int
statements:
- line: 9
  domain: '[N] -> { S_0[i, j] : i >= 0 and i <= -1 + N and j >= i and j <= -1 + N
    }'
  schedule: '[N] -> { S_0[i, j] -> [0, i, j, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_0[i, j] -> ind[] }'
      read: 0
      write: 1
    - type: ternary
      arguments:
      - type: binary
        operation: '>'
        arguments:
        - type: access
          relation: '[N] -> { S_0[i, j] -> [i] }'
          read: 1
          write: 0
        - type: access
          relation: '[N] -> { S_0[i, j] -> [0] }'
          read: 1
          write: 0
      - type: binary
        operation: '-'
        arguments:
        - type: access
          relation: '[N] -> { S_0[i, j] -> [i] }'
          read: 1
          write: 0
        - type: access
          relation: '[N] -> { S_0[i, j] -> [1] }'
          read: 1
          write: 0
      - type: access
        relation: '[N] -> { S_0[i, j] -> [i] }'
        read: 1
        write: 0
- line: 10
  domain: '[N] -> { S_1[i, j] : i >= 0 and i <= -1 + N and j >= i and j <= -1 + N
    }'
  schedule: '[N] -> { S_1[i, j] -> [0, i, j, 1] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_1[i, j] -> a[i, j] }'
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_1[i, j] -> a[i, 0] : i <= 0; S_1[i, j] -> a[-1 + i, 0]
        : i >= 1 }'
      read: 1
      write: 0
