// @PARAM: -PP "" -g:none -CPP -d ./tmp -cp ../../../../../../input/current/
// shows how to run a custom shell script as a test:
// @CUSTOM ./custom.sh
// as can be seen from the cmdl, the CWD is set to the .funky file
// @TEST noerror


import ffi.stdio;

#define MATRIX_SIZE 256

//#define OUTPUT

domain two_d{x,y} = { (j,k) | j<x & k<y } //two free

domain inner_2d{x,y} = { two_d{x,y}(a,b) | a>0 & b>0 & a< x-1&b<y-1}
//domain inner_2d{x,y}:one_d{(x-2)*(y-2)}(j) = { two_d{x,y}(a,b) | a>0 & b>0 & a< x-1&b<y-1 & j=a*x+b}

domain range{y,ys,ye}:one_d{ye-ys}(j) = { one_d{y}(a) | ys<=a & a<ye & ye<=y & j=a } //one free (a)

//alex: static dom params __{}__ are optional:
domain row{x,y}(j):one_d{y}(k) = { two_d{x,y}(a,b) | a=j & k=b } //one free(b)
domain col{x,y}(j):one_d{x}(k) = { two_d{x,y}(a,b) | b=j & k=a }	//one free(a)

//should be error, cause one_d{x} and trace{x,y} don__t have identical shape:
domain trace{x,y}:one_d{x}(j) = { two_d{x,y}(a,b) | j=a & a=b & x=y }// one free (a), indep of j //no order on items!! (warn??)

domain utriag{x,y} = { two_d{x,y}(a,b) | b>=a+1 & x=y }
domain ltriag{x,y} = { two_d{x,y}(a,b) | b<a & x=y }

//domain block{dx,dy,x,y}(i,j):two_d{dx,dy}(q,w) = { two_d{x,y}(a,b) | a>=i*dx & a<(i+1)*dx & b>=j*dy & a<(j+1)*dy & q=a & w=b }

//need templates to build nice matrix/vector classes

native class global //special: global will not be included
{
	//HACK: this is implemented in the runtime (stdio has binarysearch but requiers nasty casting)
	static public int[] array_sum(int arr[],int size); //native arrays have no domain
}

class LocalDomain
{
	public float data;
	public LocalDomain solve()
	{
		cancel this;
	}
}

public class cur
{
//FIXME: local classes fail

	static unique LocalDomain[two_d{4,4}] solve(unique LocalDomain data[two_d{4,4}])
	{
		if(data[2,2].data>0.1)
		{
			//find task local data here???:
			data__next=data.\[i,j]{data[i,j].solve()};
		}
		else
			data__next=data;

		finally data__next;
	}

	static int dyn_dom()
	{
//only one_d can be dyn, otherwise we__d need to call into barvinok at runtime

		int flat_matrix[one_d{-1}]=new int[one_d{16}].\[i]{i+1};
//		int flat_matrixxx[one_d{16}]=new int[one_d{-1}].\[i]{i+1}; //forbidden (lhs not dyn)

		flat_matrix__big=flat_matrix.resize(25);//copy unless persistent or unique

		int size=flat_matrix__big.size[0];

		flat_matrix__big.\[i] {stdio.printf("resized[%d]=%d\n",i,flat_matrix__big[i])};

		//int cast_trace[trace{5,5}]=(int[trace{5,5}])flat_matrix;//forbidden, use flat_matrix.trace()

		//reinterprete one_d as trace
		//run time check??
		flat_matrix.trace{4,4}().\[x,y]{stdio.printf("dyn_trace[%d,%d]=%d\n",x,y,flat_matrix.trace{4,4}()[x,y])};

/*
		int flat_matrixxx[one_d{16}]=new int[one_d{16}].\[i]{2*i+1};

		//error:size doesn__t match:
		flat_matrixxx.trace{3,3}().\[x,y]{stdio.printf("flat_matrixxx[%d,%d]=%d\n",x,y,flat_matrixxx.trace{4,4}()[x,y])};
*/

	    cancel size;
	}

	static int dot(int r[row{MATRIX_SIZE,MATRIX_SIZE}],int c[col{MATRIX_SIZE,MATRIX_SIZE}])
	{
		//iter over all indices i, multiply r[i]*c[i] and sum the result:

		//better version with new semantics:
		//first arg of reduce is current index, second arg is accumulated reduction value
		//{parameter} is initial accum value

		//here no copy is required :)

		cancel r.one_d.\reduce{0}(i,accum) {accum + r.one_d[i] * c.one_d[i]};

	}

	static int dotRR(int r[row{MATRIX_SIZE,MATRIX_SIZE}],int c[row{MATRIX_SIZE,MATRIX_SIZE}])
	{
		//iter over all indices i, multiply r[i]*c[i] and sum the result:

		//better version with new semantics:
		//first arg of reduce is current index, second arg is accumulated reduction value
		//{parameter} is initial accum value

		//here no copy is required :)

		cancel r.one_d.\reduce{0}(i,accum) {accum + r.one_d[i] * c.one_d[i]};

	}

	static int[two_d{MATRIX_SIZE,MATRIX_SIZE}] matmult(int ma[two_d{MATRIX_SIZE,MATRIX_SIZE}],int mb[two_d{MATRIX_SIZE,MATRIX_SIZE}])
	{
		//iter over all indices and calc corresponding dot product
		cancel ma.\[r,c]{ dot(ma.row(r),mb.col(c)) }; //implicitly new()s if necessary??
	}


	static int[two_d{MATRIX_SIZE,MATRIX_SIZE}] matmultRR(int ma[two_d{MATRIX_SIZE,MATRIX_SIZE}],int mb[two_d{MATRIX_SIZE,MATRIX_SIZE}])
	{
		//iter over all indices and calc corresponding dot product
		cancel ma.\[r,c]{ dotRR(ma.row(r),mb.row(c)) }; //implicitly new()s if necessary??
	}


	static int[row{MATRIX_SIZE,MATRIX_SIZE}] scale(int r[row{MATRIX_SIZE,MATRIX_SIZE}],int f)
	{
		cancel r.\[c,d] { r[c,d] * f };
	}

	static int domain_test()
	{
		int matrix[two_d{MATRIX_SIZE,MATRIX_SIZE}]=new int[two_d{MATRIX_SIZE,MATRIX_SIZE}].\[r,c] { r*MATRIX_SIZE+c };

		//de- and recompose
		matrix__next=matrix.trace().\[x,y]{0}~matrix.utriag().\[x,y]{-1}~matrix.ltriag().\[x,y]{1};

//		int tt=matrix.trace().one_d.\reduce{1}(i,accum) {accum*matrix.trace().one_d[i]};


//matrix.inner_2d().one_d.\[i]{stdio.printf("matrix.inner_2d[%d]=%d\n",i,matrix.inner_2d().one_d[i])};

		//this only reinterprets the trace as a one_d so no copying is taking place
//		int qq=matrix.trace().one_d[3];

		//this implicitly converts from trace to one_d (copys all elements!)
		//FIXME: force explicit cast here?
		int trace[one_d{MATRIX_SIZE}]=matrix.trace().one_d;

		//convert trace to native array (actually a nop if trace is a LinearArray, so not updated via where)
		int[] native_res=global.array_sum((int[])trace,trace.size[0]);

		//int x=native_res[5]; //forbidden to access native arrays!

		//convert native array native_res to domain array (also a nop if trace__2 is a LinearArray AND native_res is 16 byte aligned)
		//all non nop conversions copy the complete array
		trace__2=(int[one_d{MATRIX_SIZE}])native_res;

		stdio.printf("native[MATRIX_SIZE/2]=%d\n",trace__2[MATRIX_SIZE/2]);

		stdio.printf("matrix[%d,%d]=%d\n",(MATRIX_SIZE/2),(MATRIX_SIZE/2),matrix[(MATRIX_SIZE/2),(MATRIX_SIZE/2)]);


		matrix__b = new int[two_d{MATRIX_SIZE,MATRIX_SIZE}].\[r,c] { (int)(r==c) };
		matrix__res = matmultRR(matrix,matrix__b);

//		int xx=matrix.row(1).one_d[2];

		//matrix.resize(10); //only for one_d

#ifdef OUTPUT
		matrix.trace().\[r,c]{stdio.printf("matrix.trace[%d,%d]=%d\n",r,c,matrix.trace()[r,c])};

		matrix.\row(j){matrix.row(j).\[r,c]{stdio.printf("matrix.row(%d)[%d,%d]=%d\n",j,r,c,matrix.row(j)[r,c])}};

		matrix.\row(j){stdio.printf("j=%d\n",j)};

		matrix.\[r,c]{stdio.printf("matrix[%d,%d]=%d\n",r,c,matrix[r,c])};

		matrix.trace().one_d.\[i]{stdio.printf("matrix.trace.one_d[%d]=%d\n",i,matrix.trace().one_d[i])};

		matrix.utriag().\[r,c]{stdio.printf("matrix.utriag[%d,%d]=%d\n",r,c,matrix.utriag()[r,c])};

		matrix.inner_2d().\[r,c]{stdio.printf("matrix.inner_2d[%d,%d]=%d\n",r,c,matrix.inner_2d()[r,c])};

//		trace.\[i]{stdio.printf("trace[%d]=%d\n",i,trace[i])};

		matrix__b.\[r,c]{stdio.printf("matrix__b[%d,%d]=%d\n",r,c,matrix__b[r,c])};

		matrix__c = matrix__b.\row(i) { scale(matrix__b.row(i),i+1) };

		matrix__c.\[r,c]{stdio.printf("matrix__c[%d,%d]=%d\n",r,c,matrix__c[r,c])};

		matrix__res.\[r,c]{stdio.printf("matrix__res[%d,%d]=%d\n",r,c,matrix__res[r,c])};
#endif

//		matrix__res.\[r,c]{ if(matrix__res[r,c]!=r*MATRIX_SIZE+c) stdio.printf("ERROR"); };

		int kk=matrix__res[1,2]-2;

		stdio.printf("matrix__res[%d,%d]=%d\n",(MATRIX_SIZE/2),(MATRIX_SIZE/2),matrix__res[(MATRIX_SIZE/2),(MATRIX_SIZE/2)]);


		//yay..if expr. Must use {} so parser is happy?
		finally if(kk>0) {0} else {1};
	}


    static int main(int argc, inout unique String[one_d{-1}] argv)
    {
		int res=domain_test();

		dyn_dom();

		finally 0; //use finally and don__t add extra wait?? does work with root??
    }
}
